---
- name: Setup Timescale apt key
  apt_key:
    url: https://packagecloud.io/timescale/timescaledb/gpgkey
    state: present
  when: use_timescale

- name: Setup Timescale repository
  apt_repository:
    repo: deb https://packagecloud.io/timescale/timescaledb/debian buster main
    state: present
    update_cache: true
  when: use_timescale

- name: Install PostgreSQL server
  apt: name=postgresql state=present
  environment:
    LC_CTYPE: en_US.UTF-8

- name: Install Timescale
  apt: name=timescaledb-postgresql-11
  when: use_timescale

- name: Configure Timescale
  lineinfile:
    path: /etc/postgresql/11/main/postgresql.conf
    line: "shared_preload_libraries = 'timescaledb'"
  when: use_timescale
  notify:
   - Restart PostgreSQL

- name: Install PostGIS (stretch)
  apt: name=postgresql-9.6-postgis-2.3
  when: ansible_distribution_release == "stretch"

- name: Install PostGIS scripts (stretch)
  apt: name=postgresql-9.6-postgis-scripts
  when: ansible_distribution_release == "stretch"

- name: Install PostGIS (buster)
  apt: name=postgresql-11-postgis-2.5
  when: ansible_distribution_release == "buster"

- name: Install PostGIS scripts (buster)
  apt: name=postgresql-11-postgis-2.5-scripts
  when: ansible_distribution_release == "buster"

- name: Install PostGIS (bionic)
  apt: name=postgresql-10-postgis-2.4
  when: ansible_distribution_release == "bionic"

- name: Install PostGIS scripts (bionic)
  apt: name=postgresql-10-postgis-scripts
  when: ansible_distribution_release == "bionic"

- name: Install Greek unaccent rules (stretch)
  copy:
    src: unaccent.rules
    dest: /usr/share/postgresql/9.6/tsearch_data/unaccent.rules
  when: ansible_distribution_release == "stretch"

- name: Install Greek unaccent rules (buster)
  copy:
    src: unaccent.rules
    dest: /usr/share/postgresql/11/tsearch_data/unaccent.rules
  when: ansible_distribution_release == "buster"

- name: Install Greek unaccent rules (bionic)
  copy:
    src: unaccent.rules
    dest: /usr/share/postgresql/10/tsearch_data/unaccent.rules
  when: ansible_distribution_release == "bionic"

- name: Start PostgreSQL service
  service: name=postgresql state=started enabled=true

- name: Set pgpass file
  copy:
    dest: /root/.pgpass
    mode: 0600
    content: "localhost:5432:*:postgres:{{ postgres_password }}\n"

- name: Check PostgreSQL password
  command: psql -w -h localhost -U postgres -c "select 'dummy'" template1
  register: check_postgres_password
  ignore_errors: yes
  check_mode: no
  changed_when: False

- name: Set PostgreSQL password
  become: yes
  become_user: postgres
  command: psql template1 -c "ALTER USER postgres PASSWORD '{{ postgres_password }}'"
  when: check_postgres_password.rc != 0

- name: Install psycopg2
  apt: name=python3-psycopg2

- name: Create PostGIS template database
  postgresql_db:
    name: template_postgis
    template: template0
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
  become: yes
  become_user: postgres

- name: Check if PostGIS template database is setup
  become: yes
  become_user: postgres
  command: psql -c "SELECT * FROM spatial_ref_sys LIMIT 1" template_postgis
  register: check_postgis_template
  ignore_errors: yes
  check_mode: no
  changed_when: False

- name: Setup PostGIS template database
  become: yes
  become_user: postgres
  shell: >
    psql -c "CREATE LANGUAGE plpgsql" -d template_postgis;
    psql -c "CREATE EXTENSION postgis;" template_postgis;
    psql -c "UPDATE pg_database SET datistemplate='true'
             WHERE datname='template_postgis'" template_postgis;
    psql -c "GRANT SELECT ON spatial_ref_sys TO PUBLIC;" template_postgis;
    psql -c "GRANT ALL ON geometry_columns TO PUBLIC;" template_postgis;

- name: Backup PostgreSQL
  copy:
    content: "#!/bin/bash\nsu postgres -c /usr/bin/pg_dumpall >/var/backups/postgresql.dump\n"
    dest: /etc/duply/main/pre-scripts/postgres
    mode: 0755
  when: (duply_deactivate is not defined) or not duply_deactivate
